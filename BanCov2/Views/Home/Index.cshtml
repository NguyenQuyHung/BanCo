<script src="https://cdn.jsdelivr.net/npm/vue@2.6.10/dist/vue.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/axios/0.19.0/axios.min.js"></script>

<script src="~/js/signalr/dist/browser/signalr.js"></script>
<style>
    .chessboard {
        width: 850px;
        height: 850px;
        background-image: url("/Images/bancotuong.jpg");
        position: absolute;
    }

    .chessnode {
        position: absolute;
        width: 50px;
        height: 50px;
    }

    .chessimgnode {
        width: 50px;
        height: 50px;
    }
</style>
<div id="app" style="min-height:800px">
    <div class="chessboard">
        <div v-for="item in chessNode" class="chessnode"
             v-on:dragstart="dragStart"
             v-on:dragend="dragEnd"
             :id="item.id" v-bind:style="{ display: item.visible, top: item.top + 'px', left: item.left + 'px' }">
            <img :src="'/' + item.src" class="chessimgnode" />
        </div>
    </div>
</div>

<script>


    var matrix = [];
    var app = new Vue({
        el: '#app',
        data: {
            chessNode: [],
            top: 0,
            left: 0,
            currentTurn: 'do'// Lượt ban đầu là của Đỏ
        },
        methods: {
            getChessNode() {
                axios({
                    url: '/api/chess/loadChessBoard',
                    method: 'GET',
                    responseType: 'Json',
                }).then((response) => {
                    this.chessNode = response.data.chessNode;
                    matrix = response.data.maxtrix;
                });
            },
            getIndexByTopLef(top, left, matrix) {
                var obj = {};
                for (var i = 0; i < matrix.length; i++) {
                    for (var j = 0; j < matrix[i].length; j++) {
                        if (Math.abs(matrix[i][j].top - top) < 20 && Math.abs(matrix[i][j].left - left) < 20) {
                            obj.i = i;
                            obj.j = j;
                            obj.id = matrix[i][j].id;
                            return obj;
                        }
                    }
                }
                return null;
            },
            dragStart(event) {
                this.top = event.clientY;
                this.left = event.clientX;
            },
            dragEnd(event) {
                var id = event.currentTarget.id;
                var moveX = event.clientX - this.left;
                var moveY = event.clientY - this.top;
                moveX = moveX + event.currentTarget.offsetLeft;
                moveY = moveY + event.currentTarget.offsetTop;

                var nodeStart = this.getIndexByTopLef(event.currentTarget.offsetTop, event.currentTarget.offsetLeft, matrix);
                var nodeEnd = this.getIndexByTopLef(moveY, moveX, matrix);

                // Kiểm tra nếu không phải lượt của quân
                if ((id.indexOf("do") >= 0 && this.currentTurn !== 'do') || (id.indexOf("den") >= 0 && this.currentTurn !== 'den')) {
                    alert("Không phải lượt của bạn!");
                    return; // Ngừng nếu không phải lượt của người chơi
                }


                // Xử lý logic di chuyển của từng quân
                var objRemove = null;

                // Quá trình kiểm tra và di chuyển quân Pháo, Xe, Tốt, Tượng, Sĩ, Tướng...
                //-------------------------------------------
                //xử lý cho quan mã. mấy đứa xử lý cho các quân khác ngay phía dưới quân mã

                if (id.indexOf('ma') >= 0) {
                    var gapI = Math.abs(nodeEnd.i - nodeStart.i);
                    var gapJ = Math.abs(nodeEnd.j - nodeStart.j);
                    if (!((gapI == 1 && gapJ == 2) || (gapJ == 1 && gapI == 2))) {
                        return;
                    }
                    if ((gapI == 1 && gapJ == 2) && (nodeEnd.j > nodeStart.j)) {
                        if (matrix[nodeStart.i][nodeStart.j + 1].id != "") {
                            return;
                        }
                    }
                    if ((gapI == 1 && gapJ == 2) && (nodeEnd.j < nodeStart.j)) {
                        if (matrix[nodeStart.i][nodeStart.j - 1].id != "") {
                            return;
                        }
                    }

                    if ((gapI == 2 && gapJ == 1) && (nodeEnd.i > nodeStart.i)) {
                        if (matrix[nodeStart.i + 1][nodeStart.j].id != "") {
                            return;
                        }
                    }
                    if ((gapI == 2 && gapJ == 1) && (nodeEnd.i < nodeStart.i)) {
                        if (matrix[nodeStart.i - 1][nodeStart.j].id != "") {
                            return;
                        }
                    }
                    // Kiểm tra quân cùng phe ở vị trí kết thúc
                    if (nodeEnd.id != "") {
                        if ((id.indexOf("do") >= 0 && nodeEnd.id.indexOf("do") >= 0) ||
                            (id.indexOf("den") >= 0 && nodeEnd.id.indexOf("den") >= 0)) {
                            return;
                        } else {
                            // Nếu là quân khác phe, đánh dấu để loại bỏ
                            objRemove = { id: nodeEnd.id };
                        }
                    }
                }
                //end xử ly quan mã
                //------------------------------------

                // Xử lý quân Pháo
                if (id.indexOf('phao') >= 0) {
                    if (nodeStart.i !== nodeEnd.i && nodeStart.j !== nodeEnd.j) return; // Kiểm tra nếu không cùng hàng hoặc cột

                    var count = 0;
                    if (nodeStart.i === nodeEnd.i) { // Pháo di chuyển theo hàng ngang
                        var minJ = Math.min(nodeStart.j, nodeEnd.j);
                        var maxJ = Math.max(nodeStart.j, nodeEnd.j);
                        for (let j = minJ + 1; j < maxJ; j++) {
                            if (matrix[nodeStart.i][j].id !== "") count++; // Đếm số quân nằm giữa
                        }
                    } else { // Pháo di chuyển theo cột dọc
                        var minI = Math.min(nodeStart.i, nodeEnd.i);
                        var maxI = Math.max(nodeStart.i, nodeEnd.i);
                        for (let i = minI + 1; i < maxI; i++) {
                            if (matrix[i][nodeStart.j].id !== "") count++; // Đếm số quân nằm giữa
                        }
                    }

                    if (count === 1) { // Có đúng một quân nằm giữa
                        // Nếu đích có quân đối thủ, thực hiện ăn quân
                        if (nodeEnd.id !== "" &&
                            ((id.indexOf("do") >= 0 && nodeEnd.id.indexOf("den") >= 0) ||
                                (id.indexOf("den") >= 0 && nodeEnd.id.indexOf("do") >= 0))) {
                            objRemove = { id: nodeEnd.id }; // Đánh dấu để loại bỏ quân địch
                        } else {
                            return; // Không hợp lệ nếu không có quân địch tại vị trí đích
                        }
                    } else if (count === 0 && nodeEnd.id === "") {
                        // Không có quân nằm giữa và vị trí đích trống (di chuyển hợp lệ)
                        // Cho phép pháo di chuyển mà không ăn quân
                    } else {
                        return; // Không hợp lệ nếu có nhiều hơn một quân giữa hoặc vị trí đích không hợp lệ
                    }
                }
                // End xử lý quân Pháo


                //------------------------------------
                // Xử lý quân Tốt
                if (id.indexOf('tot') >= 0) {
                    var gapI = nodeEnd.i - nodeStart.i;
                    var gapJ = Math.abs(nodeEnd.j - nodeStart.j);

                    // Kiểm tra hướng di chuyển: quân Tốt đỏ đi xuống, quân Tốt đen đi lên
                    var isRed = id.indexOf('do') >= 0;

                    // Kiểm tra nếu quân Tốt chưa qua sông
                    if ((isRed && nodeStart.i <= 4) || (!isRed && nodeStart.i >= 5)) {
                        if (gapJ > 0 || (isRed ? gapI !== 1 : gapI !== -1)) return; // Chưa qua sông chỉ đi thẳng tiến 1 ô
                    } else { // Đã qua sông
                        if (gapI !== 0 && (isRed ? gapI !== 1 : gapI !== -1)) return; // Cho phép đi dọc hoặc ngang
                        if ((isRed ? gapI === 1 : gapI === -1) && gapJ > 0) return; // Không được lùi sau khi qua sông
                        if (gapI === 0 && gapJ !== 1) return; // Đi ngang đúng 1 ô
                    }

                    if (nodeEnd.id !== "" && nodeEnd.id.indexOf(isRed ? 'do' : 'den') > 0) return;
                    else if (nodeEnd.id !== "") objRemove = { id: nodeEnd.id };
                }


                // end xử lý quân Tốt

                //------------------------------------
                //xử lý quân xe
                if (id.indexOf('xe') >= 0) {
                    if (nodeStart.i !== nodeEnd.i && nodeStart.j !== nodeEnd.j) return;

                    var count = 0;

                    // Di chuyển ngang
                    if (nodeStart.i === nodeEnd.i) {
                        var minJ = Math.min(nodeStart.j, nodeEnd.j);
                        var maxJ = Math.max(nodeStart.j, nodeEnd.j);
                        for (let j = minJ + 1; j < maxJ; j++) {
                            if (matrix[nodeStart.i][j].id !== "") count++;
                        }
                    }
                    // Di chuyển dọc
                    else {
                        var minI = Math.min(nodeStart.i, nodeEnd.i);
                        var maxI = Math.max(nodeStart.i, nodeEnd.i);
                        for (let i = minI + 1; i < maxI; i++) {
                            if (matrix[i][nodeStart.j].id !== "") count++;
                        }
                    }

                    if (count > 0) return;

                    // Kiểm tra quân cùng phe
                    if (nodeEnd.id !== "" &&
                        ((id.indexOf("do") >= 0 && nodeEnd.id.indexOf("do") >= 0) ||
                            (id.indexOf("den") >= 0 && nodeEnd.id.indexOf("den") >= 0))) {
                        return;
                    }

                    // Xử lý ăn quân đối thủ
                    if (nodeEnd.id !== "") {
                        objRemove = { id: nodeEnd.id };
                    }
                }

                //end xư lý quân xe


                //------------------------------------
                // Xử lý quân Tượng
                if (id.indexOf('tuong') >= 0) {
                    var gapI = Math.abs(nodeEnd.i - nodeStart.i);
                    var gapJ = Math.abs(nodeEnd.j - nodeStart.j);

                    // Kiểm tra bước nhảy của quân Tượng (2 ô chéo)
                    if (gapI !== 2 || gapJ !== 2) return;

                    // Kiểm tra nếu có quân chắn giữa
                    if (matrix[(nodeStart.i + nodeEnd.i) / 2][(nodeStart.j + nodeEnd.j) / 2].id !== "") return;

                    // Kiểm tra quân Tượng không được qua sông
                    if ((id.indexOf("do") >= 0 && nodeEnd.i > 4) || (id.indexOf("den") >= 0 && nodeEnd.i < 5)) return;

                    // Kiểm tra quân cùng phe
                    if (nodeEnd.id !== "" &&
                        ((id.indexOf("do") >= 0 && nodeEnd.id.indexOf("do") >= 0) ||
                            (id.indexOf("den") >= 0 && nodeEnd.id.indexOf("den") >= 0))) {
                        return; // Không hợp lệ nếu vị trí đích có quân cùng phe
                    }

                    // Xử lý trường hợp quân địch
                    if (nodeEnd.id !== "") objRemove = { id: nodeEnd.id };
                }

                //------------------------------------

                // Xử lý quân Sĩ
                if (id.indexOf('si') >= 0) {
                    var gapI = Math.abs(nodeEnd.i - nodeStart.i);
                    var gapJ = Math.abs(nodeEnd.j - nodeStart.j);

                    // Kiểm tra bước nhảy của quân Sĩ (1 ô chéo)
                    if (gapI !== 1 || gapJ !== 1) return;

                    // Kiểm tra quân Sĩ không được ra ngoài cung
                    if ((id.indexOf("den") >= 0 && (nodeEnd.i < 7 || nodeEnd.i > 9 || nodeEnd.j < 3 || nodeEnd.j > 5)) ||
                        (id.indexOf("do") >= 0 && (nodeEnd.i < 0 || nodeEnd.i > 2 || nodeEnd.j < 3 || nodeEnd.j > 5))) {
                        return; // Không hợp lệ nếu quân Sĩ di chuyển ra ngoài cung
                    }

                    // Kiểm tra quân cùng phe
                    if (nodeEnd.id !== "" &&
                        ((id.indexOf("do") >= 0 && nodeEnd.id.indexOf("do") >= 0) ||
                            (id.indexOf("den") >= 0 && nodeEnd.id.indexOf("den") >= 0))) {
                        return; // Không hợp lệ nếu vị trí đích có quân cùng phe
                    }

                    // Xử lý trường hợp quân địch
                    if (nodeEnd.id !== "") objRemove = { id: nodeEnd.id };
                }


                // Xử lý quân Tướng
                if (id.indexOf('chut') >= 0) {
                    var gapI = Math.abs(nodeEnd.i - nodeStart.i);
                    var gapJ = Math.abs(nodeEnd.j - nodeStart.j);

                    // Kiểm tra bước nhảy của quân Tướng (chỉ di chuyển 1 ô dọc hoặc ngang)
                    if ((gapI !== 1 || gapJ !== 0) && (gapI !== 0 || gapJ !== 1)) return;

                    // Kiểm tra quân Tướng không được ra ngoài cung
                    if ((id.indexOf("den") >= 0 && (nodeEnd.i < 7 || nodeEnd.i > 9 || nodeEnd.j < 3 || nodeEnd.j > 5)) ||
                        (id.indexOf("do") >= 0 && (nodeEnd.i < 0 || nodeEnd.i > 2 || nodeEnd.j < 3 || nodeEnd.j > 5))) {
                        return; // Không hợp lệ nếu quân Tướng di chuyển ra ngoài cung
                    }

                    // Kiểm tra quân cùng phe
                    if (nodeEnd.id !== "" &&
                        ((id.indexOf("do") >= 0 && nodeEnd.id.indexOf("do") >= 0) ||
                            (id.indexOf("den") >= 0 && nodeEnd.id.indexOf("den") >= 0))) {
                        return; // Không hợp lệ nếu vị trí đích có quân cùng phe
                    }

                    // Kiểm tra điều kiện không đối mặt giữa hai quân Tướng
                    var otherGeneral = id.indexOf("do") >= 0 ? "chutden" : "chutdo";
                    var sameColumnGeneral = null;
                    for (var i = Math.min(nodeStart.i, nodeEnd.i) + 1; i < Math.max(nodeStart.i, nodeEnd.i); i++) {
                        if (matrix[i][nodeStart.j].id !== "") {
                            sameColumnGeneral = matrix[i][nodeStart.j].id;
                            break;
                        }
                    }
                    if (sameColumnGeneral === otherGeneral && nodeStart.j === nodeEnd.j) {
                        return; // Không hợp lệ nếu hai Tướng đối mặt mà không có quân cản
                    }

                    // Xử lý trường hợp quân địch
                    if (nodeEnd.id !== "") objRemove = { id: nodeEnd.id };
                }



                //ko xử lý quân sao phần này
                let params = new URL(document.location.toString()).searchParams;
                let roomId = params.get("roomId");
                var para = [{ id: id, fromi: nodeStart.i, fromj: nodeStart.j, toi: nodeEnd.i, toj: nodeEnd.j }];
                if (objRemove != null) {
                    para.push(objRemove);
                }
                axios({
                    url: '/api/chess/move-check-node?roomId=' + roomId,
                    method: 'Post',
                    responseType: 'Json',
                    data: para
                }).then((response) => {


                });

            }
        },


        mounted: function () {
            this.getChessNode();
            let params = new URL(document.location.toString()).searchParams;
            let roomId = params.get("roomId");
            var connection = new signalR.HubConnectionBuilder().withUrl("/chatHub?roomId=" + roomId).build();
            connection.on("ReceiveChessMove", function (message) {
                console.log(message);
                var response = JSON.parse(message);
                matrix[response[0].fromi][response[0].fromj].id = "";
                var nodeEnd = matrix[response[0].toi][response[0].toj];
                nodeEnd.id = response[0].id;


                var obj = document.getElementById(response[0].id);
                obj.style.top = nodeEnd.top + 'px';
                obj.style.left = nodeEnd.left + 'px';

                if (response.length > 1) {
                    var temp = document.getElementById(response[1].id);
                    temp.style.display = "none";
                }
                // cập nhật lại lượt
                app.currentTurn = app.currentTurn === 'do' ? 'den' : 'do';
            });

            connection.start().then(function () {

            }).catch(function (err) {
                return console.error(err.toString());
            });
        }
    });
</script>